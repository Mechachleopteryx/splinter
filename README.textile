h1. Introduction

A simple automated graph stress test tool based on the Pilot graph operator, utilizing the Tinkerpop stack -- i.e. Blueprints, Gremlin, Pipes. You can use it to:
* *quickly generate random graphs* of whatever configuration you want (you can specify number of vertices and level of connectivity)
* *benchmark* different graph database providers on some defined metrics
* *automate* sets of tests to be run on any number of graphs

h1. To Use:

h2. For Maven Users

bc. $ mvn exec:java -Dexec.args="sampletestdefinition.xml"

p. In the above command, any test definition XML file may be used in place of the example sampletestdefinition.xml file provided.

h2. Non-Maven

h3. Dependencies

Make sure you have Pilot, the Tinkerpop libraries, and your favorite graph database already in your system CLASSPATH.

h3. Running

Copy the sources in src/main/groovy/com/countvajhula/splinter/ to a desired location and _cd_ into that directory.

bc. $ groovyc *.groovy
$ ./Splinter.groovy <testdefinitionfile.xml>

p. As an example, the provided sampletestdefinition.xml file may be used in the above command.

h2. Test Definition

The test definition file is pretty straightforward XML (see sampletestdefinition.xml for a comprehensive example) like so:

bc. <sampletestdefinition>
	<graphs>
		<graph type="tinkergraph" overwrite="no">
			<vertices>100</vertices>
			<connectivity>
				<function>linear</function>
				<arg>0.2</arg>
			</connectivity>
		</graph>
		<!-- add more graphs here if you want to get crazy -->
	</graphs>
	<tests>
		<test name="getEdgesBetweenVertices">
			<times>100</times>
		</test>
		<test name="getNeighbors">
			<times>100</times>
		</test>
		<!-- these are the only pre-loaded metrics. You can add your own fairly easily by modifying the file TestMetrics.groovy, if you want to get crazy -->
	</tests>
</sampletestdefinition>

h2. Example output:

bc. $./GraphStressTester.groovy sampletestdefinition.xml
...
TinkerGraph graph initialized.
Graph empty or overwrite set to true. Recreating graph.
Running getNeighbors...
profiler results:
------PROFILER RESULTS (tinkergraph_100vertices_linear0.2connxns--getneighbors) ------
Total Duration = 152.004 ms
getNeighbors:	149.073 ms	98.07176127 %
getVertex:	1.988 ms	1.30786032 %
hashCode:	0.595 ms	0.39143707 %
equals:	0.348 ms	0.22894134 %
super$2$getElementProperty:	0.0 ms	0.0 %
$createCallSiteArray:	0.0 ms	0.0 %
super$2$getAllEdges:	0.0 ms	0.0 %
super$2$removeEdge:	0.0 ms	0.0 %
super$2$this$dist$set$2:	0.0 ms	0.0 %
... etc.
------xxxxxxxxxxxxxxxx (tinkergraph_100vertices_linear0.2connxns--getneighbors) ------

